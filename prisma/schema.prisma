// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("CUSTOMER") // "ADMIN" or "CUSTOMER"
  bookings  Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workshop {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  maxCapacity Int
  timeSlots   TimeSlot[]
  bookings    Booking[]
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TimeSlot {
  id          Int      @id @default(autoincrement())
  startTime   String
  endTime     String
  availableSpots Int
  workshop    Workshop @relation(fields: [workshopId], references: [id])
  workshopId  Int
  bookings    Booking[]
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Booking {
  id         Int      @id @default(autoincrement())
  customer   User     @relation(fields: [customerId], references: [id])
  customerId Int
  workshop   Workshop @relation(fields: [workshopId], references: [id])
  workshopId Int
  timeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id])
  timeSlotId Int
  status     String   @default("PENDING") // "CONFIRMED", "CANCELLED"
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}